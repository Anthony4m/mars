func findMedianSortedArray(nums1: []int, nums2: []int) -> float {
    m := len(nums1);
    n := len(nums2);
    mut p1 := 0;
    mut p2 := 0;

    // Check if total length is even or odd
    // For even: (m + n) % 2 == 0, which means (m + n) / 2 * 2 == (m + n)
    // For odd: (m + n) % 2 == 1, which means (m + n) / 2 * 2 != (m + n)
    total := m + n;
    half := total / 2;
    isEven := (half * 2) == total;

    if isEven {
        // Even length - need two middle elements
        mut count := 0;
        mut first := 0;
        mut second := 0;

        // Get to the position before the two middle elements
        while count < half - 1 {
            if p1 < m && p2 < n {
                if nums1[p1] <= nums2[p2] {
                    p1 = p1 + 1;
                } else {
                    p2 = p2 + 1;
                }
            } else if p1 < m {
                p1 = p1 + 1;
            } else if p2 < n {
                p2 = p2 + 1;
            }
            count = count + 1;
        }

        // Get the two middle elements
        if p1 < m && p2 < n {
            if nums1[p1] <= nums2[p2] {
                first = nums1[p1];
                p1 = p1 + 1;
            } else {
                first = nums2[p2];
                p2 = p2 + 1;
            }
        } else if p1 < m {
            first = nums1[p1];
            p1 = p1 + 1;
        } else if p2 < n {
            first = nums2[p2];
            p2 = p2 + 1;
        }

        if p1 < m && p2 < n {
            if nums1[p1] <= nums2[p2] {
                second = nums1[p1];
            } else {
                second = nums2[p2];
            }
        } else if p1 < m {
            second = nums1[p1];
        } else if p2 < n {
            second = nums2[p2];
        }

        return (first + second) / 2.0;
    } else {
        // Odd length - need middle element
        mut count := 0;

        // Get to the position before the middle element
        while count < half {
            if p1 < m && p2 < n {
                if nums1[p1] <= nums2[p2] {
                    p1 = p1 + 1;
                } else {
                    p2 = p2 + 1;
                }
            } else if p1 < m {
                p1 = p1 + 1;
            } else if p2 < n {
                p2 = p2 + 1;
            }
            count = count + 1;
        }

        // Get the middle element
        if p1 < m && p2 < n {
            if nums1[p1] <= nums2[p2] {
                return nums1[p1];
            } else {
                return nums2[p2];
            }
        } else if p1 < m {
            return nums1[p1];
        } else if p2 < n {
            return nums2[p2];
        }

        return -1.0;
    }
}

func main() {
    nums1 := [1, 3, 5];
    nums2 := [2, 4, 6];

    result := findMedianSortedArray(nums1, nums2);
    println("Median:");
    println(result);

    // Test with odd total length
    nums3 := [1, 2];
    nums4 := [3, 4, 5];

    result2 := findMedianSortedArray(nums3, nums4);
    println("Median (odd):");
    println(result2);
}