// LeetCode 42: Trapping Rain Water
// Given n non-negative integers representing an elevation map,
// compute how much water it can trap after raining.

// Two-pointer approach: O(n) time, O(1) space
func trap(height : []int) -> int {
    if len(height) < 3 {
        return 0;
    }
    
    left := 0;
    right := len(height) - 1;
    left_max := 0;
    right_max := 0;
    water := 0;
    
    while left < right {
        if height[left] < height[right] {
            if height[left] >= left_max {
                left_max = height[left];
            } else {
                water := water + (left_max - height[left]);
            }
            left := left + 1;
        } else {
            if height[right] >= right_max {
                right_max = height[right];
            } else {
                water := water + (right_max - height[right]);
            }
            right := right - 1;
        }
    }
    
    return water;
}

// Test cases
func main() {
    // Test case 1: [0,1,0,2,1,0,1,3,2,1,2,1] -> 6
    heights1 := [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1];
    result1 := trap(heights1);
    log("Test 1: Expected 6, Got ", result1);
    
    // Test case 2: [4,2,0,3,2,5] -> 9
    heights2 := [4, 2, 0, 3, 2, 5];
    result2 := trap(heights2);
    log("Test 2: Expected 9, Got ", result2);
    
    // Test case 3: [1,0,1] -> 1
    heights3 := [1, 0, 1];
    result3 := trap(heights3);
    log("Test 3: Expected 1, Got ", result3);
    
    // Test case 4: [1,1,1] -> 0
    heights4 := [1, 1, 1];
    result4 := trap(heights4);
    log("Test 4: Expected 0, Got ", result4);
    
    // Test case 5: [5,4,1,2] -> 1
    heights5 := [5, 4, 1, 2];
    result5 := trap(heights5);
    log("Test 5: Expected 1, Got ", result5);
} 