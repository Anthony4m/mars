// Final Three Sum solution in Mars 1.0
// Demonstrates array parameters, nested loops, array indexing, and conditional logic

func three_sum(nums : []int) -> [][]int {
    // Brute force approach with three nested loops
    for mut i := 0; i < len(nums); i = i + 1 {
        for mut j := i + 1; j < len(nums); j = j + 1 {
            for mut k := j + 1; k < len(nums); k = k + 1 {
                if nums[i] + nums[j] + nums[k] == 0 {
                    return [[nums[i], nums[j], nums[k]]];
                }
            }
        }
    }
    return [[]];
}

func main() {
    // Test case 1: [-1,0,1,2,-1,-4]
    result1 := three_sum([-1, 0, 1, 2, -1, -4]);
    println("Test 1: [-1,0,1,2,-1,-4]");
    println("Result:");
    println(result1);
    
    // Test case 2: [0,1,1]
    result2 := three_sum([0, 1, 1]);
    println("Test 2: [0,1,1]");
    println("Result:");
    println(result2);
    
    // Test case 3: [0,0,0]
    result3 := three_sum([0, 0, 0]);
    println("Test 3: [0,0,0]");
    println("Result:");
    println(result3);
} 