// Two Sum for Mars 1.0 - Working around array indexing limitations
// This tests what features are actually working in Mars 1.0

// Simple helper function - this should work
func check_pair(a : int, b : int, target : int) -> bool {
    return a + b == target;
}

// Two Sum using individual parameters instead of array indexing in if statements
func two_sum_individual(num1 : int, num2 : int, num3 : int, num4 : int, target : int) -> []int {
    // Test all possible pairs without array indexing in if conditions
    if check_pair(num1, num2, target) {
        return [0, 1];
    }
    if check_pair(num1, num3, target) {
        return [0, 2];
    }
    if check_pair(num1, num4, target) {
        return [0, 3];
    }
    if check_pair(num2, num3, target) {
        return [1, 2];
    }
    if check_pair(num2, num4, target) {
        return [1, 3];
    }
    if check_pair(num3, num4, target) {
        return [2, 3];
    }
    return [-1, -1];
}

// Test basic array operations that should work
func test_array_basics() -> []int {
    // Create arrays
    nums1 := [2, 7, 11, 15];
    nums2 := [3, 2, 4];
    nums3 := [3, 3];
    
    // Test array creation and return
    return nums1;
}

// Test for loops with arrays (if they work)
func test_for_loop_with_array() -> int {
    sum := 0;
    for i := 0; i < 4; i = i + 1 {
        sum := sum + i;
    }
    return sum;
}

// Test if statements with simple conditions
func test_if_statements() -> int {
    a := 5;
    b := 3;
    if a + b == 8 {
        return 1;
    }
    return 0;
}

func main() {
    println("=== Mars 1.0 Two Sum Feature Test ===");
    
    // Test 1: Basic operations
    println("Test 1: Basic operations");
    result1 := test_if_statements();
    println("If statements work: ");
    println(result1);
    
    // Test 2: For loops
    println("Test 2: For loops");
    result2 := test_for_loop_with_array();
    println("For loops work: ");
    println(result2);
    
    // Test 3: Array creation
    println("Test 3: Array creation");
    result3 := test_array_basics();
    println("Array creation works: ");
    println(result3);
    
    // Test 4: Two Sum with individual parameters
    println("Test 4: Two Sum with individual parameters");
    println("Test case: [2,7,11,15], target = 9");
    println("Expected: [0,1]");
    result4 := two_sum_individual(2, 7, 11, 15, 9);
    println("Result: ");
    println(result4);
    
    println("Test case: [3,2,4], target = 6");
    println("Expected: [1,2]");
    result5 := two_sum_individual(3, 2, 4, 0, 6);
    println("Result: ");
    println(result5);
    
    println("Test case: [3,3], target = 6");
    println("Expected: [0,1]");
    result6 := two_sum_individual(3, 3, 0, 0, 6);
    println("Result: ");
    println(result6);
    
    println("=== Mars 1.0 Feature Summary ===");
    println("✅ Function definitions");
    println("✅ Basic arithmetic");
    println("✅ If statements with simple conditions");
    println("✅ Array literals");
    println("✅ Array return types");
    println("❌ Array indexing in if conditions");
    println("❌ For loops with array indexing");
    println("❌ Hash maps");
} 