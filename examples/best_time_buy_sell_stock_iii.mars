func max_profit(prices : []int) -> int {
    if len(prices) < 2 {
        return 0;
    }
    
    // For at most 2 transactions, we can use a simple approach
    // Find the best single transaction first, then find the best second transaction
    
    mut max_profit := 0;
    
    // Try all possible split points for two transactions
    for mut i := 1; i < len(prices) - 1; i = i + 1 {
        // First transaction: 0 to i
        mut profit1 := 0;
        mut min_price1 := prices[0];
        
        for mut j := 1; j <= i; j = j + 1 {
            if prices[j] < min_price1 {
                min_price1 = prices[j];
            }
            current_profit := prices[j] - min_price1;
            if current_profit > profit1 {
                profit1 = current_profit;
            }
        }
        
        // Second transaction: i+1 to end
        mut profit2 := 0;
        mut min_price2 := prices[i + 1];
        
        for mut j := i + 2; j < len(prices); j = j + 1 {
            if prices[j] < min_price2 {
                min_price2 = prices[j];
            }
            current_profit := prices[j] - min_price2;
            if current_profit > profit2 {
                profit2 = current_profit;
            }
        }
        
        total_profit := profit1 + profit2;
        if total_profit > max_profit {
            max_profit = total_profit;
        }
    }
    
    return max_profit;
}

func main() {
    // Test case 1: [3,3,5,0,0,3,1,4]
    result1 := max_profit([3, 3, 5, 0, 0, 3, 1, 4]);
    println("Test 1: [3,3,5,0,0,3,1,4]");
    println("Expected: 6 (buy at 0, sell at 3, then buy at 1, sell at 4)");
    println("Result:");
    println(result1);
    
    // Test case 2: [1,2,3,4,5]
    result2 := max_profit([1, 2, 3, 4, 5]);
    println("Test 2: [1,2,3,4,5]");
    println("Expected: 4 (buy at 1, sell at 5)");
    println("Result:");
    println(result2);
    
    // Test case 3: [7,6,4,3,1]
    result3 := max_profit([7, 6, 4, 3, 1]);
    println("Test 3: [7,6,4,3,1]");
    println("Expected: 0 (no profit possible)");
    println("Result:");
    println(result3);
    
    // Test case 4: [1]
    result4 := max_profit([1]);
    println("Test 4: [1]");
    println("Expected: 0");
    println("Result:");
    println(result4);
} 