// Simple version of LeetCode 42: Trapping Rain Water
// This version uses a simplified approach that works with current Mars features

func trap(height []int) -> int {
    if len(height) < 3 {
        return 0;
    }
    
    // Simple approach: calculate water trapped at each position
    water := 0;
    
    for i := 1; i < len(height) - 1; i = i + 1 {
        // Find max height on left
        left_max := 0;
        for j := 0; j < i; j = j + 1 {
            if height[j] > left_max {
                left_max = height[j];
            }
        }
        
        // Find max height on right
        right_max := 0;
        for j := i + 1; j < len(height); j = j + 1 {
            if height[j] > right_max {
                right_max = height[j];
            }
        }
        
        // Calculate water trapped at this position
        min_height := left_max;
        if right_max < left_max {
            min_height = right_max;
        }
        
        if min_height > height[i] {
            water := water + (min_height - height[i]);
        }
    }
    
    return water;
}

func main() {
    // Test case 1: [0,1,0,2,1,0,1,3,2,1,2,1] -> 6
    heights1 := [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1];
    result1 := trap(heights1);
    log("Test 1 result: ");
    log(result1);
    
    // Test case 2: [4,2,0,3,2,5] -> 9
    heights2 := [4, 2, 0, 3, 2, 5];
    result2 := trap(heights2);
    log("Test 2 result: ");
    log(result2);
    
    // Test case 3: [1,0,1] -> 1
    heights3 := [1, 0, 1];
    result3 := trap(heights3);
    log("Test 3 result: ");
    log(result3);
} 