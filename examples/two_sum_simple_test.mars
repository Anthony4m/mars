// Simple Two Sum test for Mars 1.0
// Testing basic features without complex array operations

func check_pair(a : int, b : int, target : int) -> bool {
    return a + b == target;
}

func two_sum_simple(num1 : int, num2 : int, num3 : int, num4 : int, target : int) -> []int {
    if check_pair(num1, num2, target) {
        return [0, 1];
    }
    if check_pair(num1, num3, target) {
        return [0, 2];
    }
    if check_pair(num1, num4, target) {
        return [0, 3];
    }
    if check_pair(num2, num3, target) {
        return [1, 2];
    }
    if check_pair(num2, num4, target) {
        return [1, 3];
    }
    if check_pair(num3, num4, target) {
        return [2, 3];
    }
    return [-1, -1];
}

func main() {
    println("=== Mars 1.0 Two Sum Simple Test ===");
    
    // Test case 1: [2,7,11,15], target = 9
    println("Test 1: [2,7,11,15], target = 9");
    println("Expected: [0,1]");
    
    result1 := two_sum_simple(2, 7, 11, 15, 9);
    println("Result: ");
    println(result1);
    
    // Test case 2: [3,2,4], target = 6
    println("Test 2: [3,2,4], target = 6");
    println("Expected: [1,2]");
    
    result2 := two_sum_simple(3, 2, 4, 0, 6);
    println("Result: ");
    println(result2);
    
    // Test case 3: [3,3], target = 6
    println("Test 3: [3,3], target = 6");
    println("Expected: [0,1]");
    
    result3 := two_sum_simple(3, 3, 0, 0, 6);
    println("Result: ");
    println(result3);
    
    println("=== Test Complete ===");
} 